(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{77:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var o=t(2),a=t(6),i=(t(0),t(99)),s={id:"quickstart",title:"Quickstart",sidebar_label:"Quickstart",slug:"/"},r={unversionedId:"quickstart",id:"quickstart",isDocsHomePage:!1,title:"Quickstart",description:"Elementos is a framework-agnostic, reactive state management library with an emphasis on composition. Elementos prefers to be explicit over concise, meaning you might write a little more code than you would with libraries like mobx, but you'll quickly understand the repercussions of changing any line of code and you won't feel like things are happening magically.",source:"@site/docs/quickstart.md",slug:"/",permalink:"/elementos-docs/docs/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/quickstart.md",version:"current",sidebar_label:"Quickstart",sidebar:"main",next:{title:"atom",permalink:"/elementos-docs/docs/guides/atom"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Observables",id:"observables",children:[{value:"atom",id:"atom",children:[]},{value:"molecule",id:"molecule",children:[]},{value:"derived",id:"derived",children:[]}]},{value:"Actions",id:"actions",children:[]},{value:"Batching",id:"batching",children:[]},{value:"Composition",id:"composition",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Elementos is a framework-agnostic, reactive state management library with an emphasis on composition. Elementos prefers to be explicit over concise, meaning you might write a little more code than you would with libraries like mobx, but you'll quickly understand the repercussions of changing any line of code and you won't feel like things are happening magically. "),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save elementos\n")),Object(i.b)("h2",{id:"observables"},"Observables"),Object(i.b)("p",null,"An observable is an object that can be observed using the ",Object(i.b)("inlineCode",{parentName:"p"},"observe")," function and whose value is expected to change over time. Whenever the observable's value changes, all observers will be executed. There are three observable-producing functions packaged with elementos: ",Object(i.b)("inlineCode",{parentName:"p"},"atom"),", ",Object(i.b)("inlineCode",{parentName:"p"},"molecule"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"derived"),"."),Object(i.b)("h3",{id:"atom"},"atom"),Object(i.b)("p",null,"An atom is an observable state container. We can get, set, and observe an atom's value."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, observe } from 'elementos'\n\nconst count$ = atom(0)\n\nobserve(count$, (count) => {\n  console.log(`Count is: ${count}`)\n})\n\ncount$.actions.set(1)\ncount$.actions.set(prev => prev + 1)\n\n// Output:\n// Count is: 0\n// Count is: 1\n// Count is: 2\n")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"What's up with the ",Object(i.b)("inlineCode",{parentName:"p"},"$")," at the end of ",Object(i.b)("inlineCode",{parentName:"p"},"count$"),"? This is known as ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://medium.com/@benlesh/observables-and-finnish-notation-df8356ed1c9b"}),"Finnish Notation")," and is sometimes used to name variables that contain observable values. Elementos uses this notation where possible."))),Object(i.b)("h3",{id:"molecule"},"molecule"),Object(i.b)("p",null,"Molecules are used to aggregate observables. Observers of a molecule will be notified any time the dependencies of the molecule are updated."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, molecule, observe } from 'elementos'\n\nconst sum$ = molecule({\n  x: atom(2),\n  y: atom(5)\n}, {\n  deriver: ({ x, y }) => x + y\n})\n\nobserve(sum$, (sum) => {\n  console.log(`Sum is: ${sum}`)\n})\n\nsum$.actions.x.actions.set(5)\n\n// Output:\n// Sum is: 7\n// Sum is: 10\n")),Object(i.b)("h3",{id:"derived"},"derived"),Object(i.b)("p",null,"Derived observables are used to compute a new observable from an existing observable."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, derived, observe } from 'elementos'\n\nconst count$ = atom(2)\nconst doubled$ = derived(count$, (count) => count * 2)\n\nobserve(doubled$, (doubled) => {\n  console.log(`Doubled is: ${doubled}`)\n})\n\ncount$.actions.set(5)\n\n// Output:\n// Doubled is: 4\n// Doubled is: 10\n")),Object(i.b)("h2",{id:"actions"},"Actions"),Object(i.b)("p",null,"Atoms and molecules allow us to define custom actions, a powerful way to gatekeep our state."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom } from 'elementos'\n\nconst createVisibility$ = (defaultValue) => {\n  return atom(defaultValue, {\n    actions: (set) => ({\n      open: () => set(true),\n      close: () => set(false)\n    })\n  })\n}\n\nconst visibility$ = createVisibility$(false)\n\nobserve(visibility$, (isOpen) => {\n  console.log(isOpen ? 'open' : 'closed')\n})\n\nvisibility$.actions.open()\nvisibility$.actions.close()\n")),Object(i.b)("h2",{id:"batching"},"Batching"),Object(i.b)("p",null,"Updates to atom state happen synchronously, as do the effects run by observers. As a result, the following code will run the observer callback twice during ",Object(i.b)("inlineCode",{parentName:"p"},"doubleIncrement"),". "),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom } from 'elementos'\n\nconst counter$ = atom(0, {\n  actions: (set) => {\n    const increment = () => {\n      set((prev) => prev + 1)\n    }\n    const doubleIncrement = () => {\n      increment()\n      increment()\n    }\n    return {\n      increment,\n      doubleIncrement\n    }\n  }\n})\n\nobserve(counter$, (count) => {\n  console.log(`Count is: ${count}`)\n})\n\ncounter$.actions.doubleIncrement()\n\n// Output:\n// Count is: 0\n// Count is: 1\n// Count is: 2\n")),Object(i.b)("p",null,"We can batch updates to ensure the observer callback runs only once after the completion of the batched update."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, batched } from 'elementos'\n\nconst counter$ = atom(0, {\n  actions: (set) => {\n    const increment = () => {\n      set((prev) => prev + 1)\n    }\n    const doubleIncrement = batched(() => {\n      increment()\n      increment()\n    })\n    return {\n      increment,\n      doubleIncrement\n    }\n  }\n})\n\nobserve(counter$, (count) => {\n  console.log(`Count is: ${count}`)\n})\n\ncounter$.actions.doubleIncrement()\n\n// Output:\n// Count is: 0\n// Count is: 2\n")),Object(i.b)("h2",{id:"composition"},"Composition"),Object(i.b)("p",null,"When we begin to compose all of these things together, we can create some really cool abstractions. Below is a state manager for dialogs that controls dialog visibility and allows for context data to be passed when opening a dialog."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, molecule, batched } from 'elementos'\n\nconst createVisibility$ = (defaultValue) => {\n  return atom(defaultValue, {\n    actions: (set) => ({\n      open: () => set(true),\n      close: () => set(false)\n    })\n  })\n}\n\nexport const createDialog$ = ({\n  defaultVisibility = false,\n  defaultContext = null\n} = {}) => {\n  const visibility$ = createVisibility$(defaultVisibility)\n  const context$ = atom(defaultContext)\n\n  const dialog$ = molecule(\n    {\n      visibility: visibility$,\n      context: context$\n    },\n    {\n      actions: ({ visibility, context }) => ({\n        open: batched((nextContext: Context) => {\n          context.actions.set(nextContext)\n          visibility.actions.open()\n        }),\n        close: batched(() => {\n          context.actions.set(null)\n          visibility.actions.close()\n        })\n      }),\n      deriver: ({ visibility, context }) => ({\n        isOpen: visibility,\n        context\n      })\n    }\n  )\n\n  return dialog$\n}\n\nconst userDialog$ = createDialog$()\n\nobserve(userDialog$, ({ isOpen, context }) => {\n  console.log({\n    isOpen,\n    context\n  })\n})\n\nuserDialog$.actions.open({\n  firstName: 'Austin',\n  lastName: 'Malerba',\n  email: 'frostin@gmail.com'\n})\nuserDialog$.actions.close()\n\n// Output:\n// { isOpen: false, context: null }\n// { \n//  isOpen: true, \n//  context: {\n//    firstName: 'Austin',\n//    lastName: 'Malerba',\n//    email: 'frostin@gmail.com'\n//  }\n// }\n// { isOpen: false, context: null }\n")))}u.isMDXComponent=!0},99:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return p}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},b=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=u(t),d=o,p=b["".concat(s,".").concat(d)]||b[d]||m[d]||i;return t?a.a.createElement(p,r(r({ref:n},l),{},{components:t})):a.a.createElement(p,r({ref:n},l))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=d;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);