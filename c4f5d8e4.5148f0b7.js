(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{94:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),i=n(111),l=n(105),s=n(103),r=(n(85),n(241)),c=n(243),m=n(244),d=n(245),p=n(248),b=n(236),g=n(246);const u=Object(b.a)({fonts:{heading:"Poppins",body:"Poppins"}}),h=({children:e})=>o.a.createElement(g.a,{theme:u},e);var v=n(2),w=n(128),E=n(230);var x=({code:e,language:t="jsx"})=>o.a.createElement(w.a,Object(v.a)({},w.b,{code:e,language:t,theme:E.a}),(({className:e,style:t,tokens:n,getLineProps:a,getTokenProps:i})=>o.a.createElement("pre",{className:e,style:{...t,fontSize:".92rem"}},n.map(((e,t)=>o.a.createElement("div",a({line:e,key:t}),e.map(((e,t)=>o.a.createElement("span",i({token:e,key:t}))))))))));t.default=function(){var e=Object(l.a)().siteConfig,t=void 0===e?{}:e;return o.a.createElement(h,null,o.a.createElement(i.a,{title:""+t.title,description:"Composable reactive state management library."},o.a.createElement(r.a,{bg:"white",align:"center",p:[12,12,16]},o.a.createElement(c.a,{mb:8,display:["none","none","block"]},o.a.createElement("img",{src:"img/logo.svg"})),o.a.createElement(r.a,{w:"70%",minW:"380px",spacing:8},o.a.createElement(m.a,{size:"3xl"},"The next generation of react hooks"),o.a.createElement(d.a,{fontSize:"xl"},"Elementos is a framework-agnostic reactive state management library with an emphasis on state composability and encapsulation. In elementos, state is modeled as a graph of observable state nodes. Try clicking the nodes below and watch as state changes propagate through the graph."),o.a.createElement(r.a,{isInline:!0,spacing:4},o.a.createElement(p.a,{colorScheme:"purple",w:140,as:s.a,to:"/docs"},"See the docs"),o.a.createElement(p.a,{as:s.a,to:"https://github.com/malerba118/elementos"},"View on GitHub")))),o.a.createElement(c.a,{w:"100%"},o.a.createElement("iframe",{src:"https://codesandbox.io/embed/cytoscape-demo-forked-rj787?fontsize=14&hidenavigation=1&theme=dark",style:{width:"100%",height:"700px",border:0,overflow:"hidden",background:"#151515"},title:"cytoscape demo (forked)",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})),o.a.createElement(r.a,{bg:"#EDF2F7",p:[6,6,16],direction:["column","column","row"],spacing:[6,6,16]},o.a.createElement(r.a,{flex:"16"},o.a.createElement(m.a,{size:"xl"},"Track browser events"),o.a.createElement(d.a,{fontSize:"lg"},"Easily tap into browser api's like window resize events and create observables that automatically subscribe/unsubscribe listeners as needed."),o.a.createElement(p.a,{w:220,colorScheme:"purple",as:s.a,to:"https://codesandbox.io/s/elementos-window-size-jyuin?file=/src/index.js"},"Open in CodeSandbox")),o.a.createElement(c.a,{flex:"24",overflow:"auto"},o.a.createElement(x,{code:'import { atom } from "elementos";\n\nexport const createWindowSize$ = () => {\n  const size$ = atom(null);\n  let listener = null;\n  size$.onObserverChange(({ count }) => {\n    // if there are no observers, remove listener\n    if (count === 0 && listener) {\n      window.removeEventListener("resize", listener);\n      listener = null;\n    } else if (count > 0 && !listener) {\n      // if there are observers, add listener\n      listener = () => {\n        size$.actions.set({\n          height: window.innerHeight,\n          width: window.innerWidth\n        });\n      };\n      listener();\n      window.addEventListener("resize", listener);\n    }\n  });\n  return size$;\n};'}))),o.a.createElement(r.a,{bg:"white",p:[6,6,16],direction:["column","column","row"],spacing:[6,6,16]},o.a.createElement(c.a,{flex:"24",overflow:"auto"},o.a.createElement(x,{code:"import { atom, molecule, batched } from 'elementos'\n\nconst createVisibility$ = (defaultValue) => {\n  return atom(defaultValue, {\n    actions: (set) => ({\n      open: () => set(true),\n      close: () => set(false)\n    })\n  });\n};\n\nexport const createDialog$ = ({ isOpen = false, context = null } = {}) => {\n  const visibility$ = createVisibility$(isOpen);\n  const context$ = atom(context);\n\n  const dialog$ = molecule(\n    {\n      visibility: visibility$,\n      context: context$\n    },\n    {\n      actions: ({ visibility, context }) => ({\n        open: batched((nextContext) => {\n          context.actions.set(nextContext);\n          visibility.actions.open();\n        }),\n        close: batched(() => {\n          context.actions.set(null);\n          visibility.actions.close();\n        })\n      }),\n      deriver: ({ visibility, context }) => ({\n        isOpen: visibility,\n        context\n      })\n    }\n  );\n\n  return dialog$;\n};"})),o.a.createElement(r.a,{flex:"16"},o.a.createElement(m.a,{size:"xl"},"Manage dialog state"),o.a.createElement(d.a,{fontSize:"lg"},"Create abstractions for common state needs like dialog visibility, requests, and pagination."),o.a.createElement(p.a,{w:220,colorScheme:"purple",as:s.a,to:"https://codesandbox.io/s/elementos-dialog-state-p02d5"},"Open in CodeSandbox"))),o.a.createElement(r.a,{bg:"#EDF2F7",p:[6,6,16],direction:["column","column","row"],spacing:[6,6,16]},o.a.createElement(r.a,{flex:"16"},o.a.createElement(m.a,{size:"xl"},"Create dynamic intervals"),o.a.createElement(d.a,{fontSize:"lg"},"Create dynamic intervals with update-able callbacks and interval times."),o.a.createElement(p.a,{w:220,colorScheme:"purple",as:s.a,to:"https://codesandbox.io/s/elementos-interval-9vfik"},"Open in CodeSandbox")),o.a.createElement(c.a,{flex:"24",overflow:"auto"},o.a.createElement(x,{code:'import { atom, observe } from "elementos";\n\nexport const createInterval = (initialCallback, interval) => {\n  const interval$ = atom(interval);\n  let callback = initialCallback;\n  const dispose = observe(interval$, (interval) => {\n    const id = setInterval(() => {\n      callback();\n    }, interval);\n    return () => {\n      clearInterval(id);\n    };\n  });\n  return {\n    setInterval: interval$.actions.set,\n    setCallback: (nextCallback) => {\n      callback = nextCallback;\n    },\n    dispose\n  };\n};'}))),o.a.createElement(r.a,{bg:"white",p:[6,6,16],spacing:[6,6,16],align:"center"},o.a.createElement(m.a,{size:"3xl"},"An Elevator Pitch"),o.a.createElement("video",{style:{width:"100%",maxWidth:1200},controls:!0},o.a.createElement("source",{src:"img/pitch.mp4",type:"video/mp4"}),"Your browser does not support the video tag."))))}}}]);