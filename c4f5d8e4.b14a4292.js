(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{95:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),o=n(112),s=n(106),l=n(104),r=(n(86),n(243)),c=n(245),m=n(246),d=n(247),p=n(250),b=n(238),w=n(248);const g=Object(b.a)({fonts:{heading:"Poppins",body:"Poppins"}}),h=({children:e})=>i.a.createElement(w.a,{theme:g},e);var u=n(2),f=n(129),v=n(232);var x=({code:e,language:t="jsx"})=>i.a.createElement(f.a,Object(u.a)({},f.b,{code:e,language:t,theme:v.a}),(({className:e,style:t,tokens:n,getLineProps:a,getTokenProps:o})=>i.a.createElement("pre",{className:e,style:{...t,fontSize:".92rem"}},n.map(((e,t)=>i.a.createElement("div",a({line:e,key:t}),e.map(((e,t)=>i.a.createElement("span",o({token:e,key:t}))))))))));t.default=function(){const e=Object(s.a)(),{siteConfig:t={}}=e;return i.a.createElement(h,null,i.a.createElement(o.a,{title:`Hello from ${t.title}`,description:"Description will go into a meta tag in <head />"},i.a.createElement(r.a,{bg:"white",align:"center",p:16},i.a.createElement(c.a,{mb:8},i.a.createElement("img",{src:"img/logo.svg"})),i.a.createElement(r.a,{w:"70%",minW:"380px",spacing:8},i.a.createElement(m.a,{size:"3xl"},"The next generation of react hooks"),i.a.createElement(d.a,{fontSize:"xl"},"Elementos is a framework-agnostic reactive state management library with an emphasis on state composability and encapsulation. In elementos, state is modeled as a graph of observable state nodes. Try clicking the nodes below and watch as state changes propagate through the graph."),i.a.createElement(p.a,{colorScheme:"purple",w:140,as:l.a,to:"/docs"},"See the docs"))),i.a.createElement(c.a,{w:"100%"},i.a.createElement("iframe",{src:"https://codesandbox.io/embed/cytoscape-demo-forked-rj787?fontsize=14&hidenavigation=1&theme=dark",style:{width:"100%",height:"700px",border:0,overflow:"hidden",background:"#151515"},title:"cytoscape demo (forked)",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})),i.a.createElement(r.a,{bg:"#f2ecff",isInline:!0,w:"100%",p:16,spacing:[0,0,16],wrap:"wrap",justify:"center"},i.a.createElement(r.a,{pb:12,flex:"16",spacing:3,width:["100%","auto"]},i.a.createElement(m.a,{size:"xl"},"Track browser events"),i.a.createElement(d.a,{fontSize:"lg"},"Easily tap into browser api's like window resize events and create observables that automatically subscribe/unsubscribe listeners as needed."),i.a.createElement(p.a,{w:220,colorScheme:"purple",as:l.a,to:"https://codesandbox.io/s/elementos-window-size-jyuin?file=/src/index.js"},"Open in CodeSandbox")),i.a.createElement(c.a,{flex:"24",width:["100%","100%","auto"]},i.a.createElement(x,{code:'import { atom } from \'elementos\';\n\nexport const createWindowSize$ = () => {\n  const size$ = atom(null);\n  let listener;\n  size$.onObserverChange(({ count }) => {\n    // if there are no observers, remove listener\n    if (count === 0 && listener) {\n      window.removeEventListener("resize", listener);\n    } else if (count > 0 && !listener) {\n      // if there are observers, add listener\n      listener = () => {\n        size$.actions.set({\n          height: window.innerHeight,\n          width: window.innerWidth\n        });\n      };\n      listener();\n      window.addEventListener("resize", listener);\n    }\n  });\n  return size$;\n};'}))),i.a.createElement(r.a,{bg:"white",isInline:!0,w:"100%",p:16,spacing:[0,0,16],wrap:"wrap",justify:"center"},i.a.createElement(c.a,{flex:"24",width:["100%","100%","auto"]},i.a.createElement(x,{code:"import { atom, molecule, batched } from 'elementos'\n\nconst createVisibility$ = (defaultValue) => {\n  return atom(defaultValue, {\n    actions: (set) => ({\n      open: () => set(true),\n      close: () => set(false)\n    })\n  });\n};\n\nexport const createDialog$ = ({ isOpen = false, context = null } = {}) => {\n  const visibility$ = createVisibility$(isOpen);\n  const context$ = atom(context);\n\n  const dialog$ = molecule(\n    {\n      visibility: visibility$,\n      context: context$\n    },\n    {\n      actions: ({ visibility, context }) => ({\n        open: batched((nextContext) => {\n          context.actions.set(nextContext);\n          visibility.actions.open();\n        }),\n        close: batched(() => {\n          context.actions.set(null);\n          visibility.actions.close();\n        })\n      }),\n      deriver: ({ visibility, context }) => ({\n        isOpen: visibility,\n        context\n      })\n    }\n  );\n\n  return dialog$;\n};"})),i.a.createElement(r.a,{pt:[12,12,0],flex:"16",spacing:3,width:["100%","auto"]},i.a.createElement(m.a,{size:"xl"},"Manage dialog state"),i.a.createElement(d.a,{fontSize:"lg"},"Create abstractions for common state needs like dialog visibility, requests, and pagination."),i.a.createElement(p.a,{w:220,colorScheme:"purple",as:l.a,to:"https://codesandbox.io/s/elementos-dialog-state-p02d5"},"Open in CodeSandbox"))),i.a.createElement(r.a,{bg:"#f2ecff",isInline:!0,w:"100%",p:16,spacing:[0,0,16],wrap:"wrap",justify:"center"},i.a.createElement(r.a,{pb:12,flex:"16",spacing:3,width:["100%","auto"]},i.a.createElement(m.a,{size:"xl"},"Create dynamic intervals"),i.a.createElement(d.a,{fontSize:"lg"},"Create dynamic intervals with update-able callbacks and interval times."),i.a.createElement(p.a,{w:220,colorScheme:"purple",as:l.a,to:"https://codesandbox.io/s/elementos-interval-9vfik"},"Open in CodeSandbox")),i.a.createElement(c.a,{flex:"24",width:["100%","100%","auto"]},i.a.createElement(x,{code:'import { atom, observe } from "elementos";\n\nexport const createInterval = (initialCallback, interval) => {\n  const interval$ = atom(interval);\n  let callback = initialCallback;\n  const dispose = observe(interval$, (interval) => {\n    const id = setInterval(() => {\n      callback();\n    }, interval);\n    return () => {\n      clearInterval(id);\n    };\n  });\n  return {\n    setInterval: interval$.actions.set,\n    setCallback: (nextCallback) => {\n      callback = nextCallback;\n    },\n    dispose\n  };\n};'})))))}}}]);