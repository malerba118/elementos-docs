(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{100:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return p}));var o=t(0),r=t.n(o);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=r.a.createContext({}),u=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return r.a.createElement(i.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=u(t),d=o,p=m["".concat(a,".").concat(d)]||m[d]||b[d]||c;return t?r.a.createElement(p,l(l({ref:n},i),{},{components:t})):r.a.createElement(p,l({ref:n},i))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var i=2;i<c;i++)a[i]=t[i];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var o=t(2),r=t(6),c=(t(0),t(100)),a={id:"molecule",title:"molecule",sidebar_label:"molecule"},l={unversionedId:"guides/molecule",id:"guides/molecule",isDocsHomePage:!1,title:"molecule",description:"Molecules are observables used to aggregate other observables. They are useful to compose together atoms, molecules, and derived observables into higher level apis.",source:"@site/docs/guides/molecule.md",slug:"/guides/molecule",permalink:"/elementos-docs/docs/guides/molecule",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/guides/molecule.md",version:"current",sidebar_label:"molecule",sidebar:"main",previous:{title:"atom",permalink:"/elementos-docs/docs/guides/atom"},next:{title:"derived",permalink:"/elementos-docs/docs/guides/derived"}},s=[{value:"Basic",id:"basic",children:[]},{value:"Custom Actions",id:"custom-actions",children:[]},{value:"Derivation",id:"derivation",children:[]},{value:"onObserverChange",id:"onobserverchange",children:[]}],i={rightToc:s};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Molecules are observables used to aggregate other observables. They are useful to compose together atoms, molecules, and derived observables into higher level apis. "),Object(c.b)("h3",{id:"basic"},"Basic"),Object(c.b)("p",null,"In their simplest form, we may instantiate molecules specifying only children observables."),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, molecule } from 'elementos'\n\nconst counts$ = molecule({\n  count1: atom(10),\n  count2: atom(10)\n})\n\n// actions object will default to the children\ncounts$.actions.count1.actions.set(11)\n\n// derived value will reflect the shape of the children\nconsole.log(counts$.get())\n\n// Output:\n// { count1: 11, count2: 10 }\n")),Object(c.b)("h3",{id:"custom-actions"},"Custom Actions"),Object(c.b)("p",null,"Similarly to atoms, we may define custom actions for our molecule that restrict the way in which we modify its dependencies."),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, molecule } from 'elementos'\n\nconst counts$ = molecule({\n  count1: atom(10),\n  count2: atom(10)\n}, {\n  actions: ({ count1, count2 }) => ({\n    incrementAll: () => {\n      count1.actions.increment()\n      count2.actions.increment()\n    }\n  })\n})\n\ncounts$.actions.incrementAll()\n\nconsole.log(counts$.get())\n\n// Output:\n// { count1: 11, count2: 11 }\n")),Object(c.b)("h3",{id:"derivation"},"Derivation"),Object(c.b)("p",null,"We may also provide a custom deriver to the molecule to change the shape of its observable value."),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, molecule } from 'elementos'\n\nconst counts$ = molecule({\n  count1: atom(10),\n  count2: atom(10)\n}, {\n  actions: ({ count1, count2 }) => ({\n    incrementAll: () => {\n      count1.actions.increment()\n      count2.actions.increment()\n    }\n  })\n  deriver: (({ count1, count2 }) => count1 + count2\n})\n\ncounts$.actions.incrementAll()\n\nconsole.log(counts$.get())\n\n// Output:\n// 22\n")),Object(c.b)("h3",{id:"onobserverchange"},"onObserverChange"),Object(c.b)("p",null,"Molecules allow us to hook into information about their observers as well. Whenever an observer subscribes/unsubscribes from a molecule, we will become notified via onObserverChange callbacks."),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { atom, molecule, observe } from 'elementos'\n\nconst counts$ = molecule({\n  count1: atom(10),\n  count2: atom(10)\n})\n\ncounts$.onObserverChange(({ count }) => {\n  console.log(count)\n})\n\nconst dispose1 = observe(counts$, (counts) => {})\nconst dispose2 = observe(counts$, (counts) => {})\n\ndispose1()\ndispose2()\n\n// Output:\n// 1\n// 2\n// 1\n// 0\n")))}u.isMDXComponent=!0}}]);